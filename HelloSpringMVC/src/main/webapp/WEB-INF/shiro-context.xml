<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"/>
    <!-- 缓存管理 -->
    <!--<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>-->
    <!--
      使用Shiro自带的JdbcRealm类
      指定密码匹配所需要用到的加密对象
      指定存储用户、角色、权限许可的数据源及相关查询语句
     -->
    <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="permissionsLookupEnabled" value="true"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="authenticationQuery" value="SELECT NSRMC FROM T_USER WHERE USER_ID = ?"/>
        <!--<property name="userRolesQuery" value="SELECT role_name from sec_user_role left join sec_role using(role_id) left join sec_user using(user_id) WHERE user_name = ?"/>-->
        <!--<property name="permissionsQuery" value="SELECT permission_name FROM sec_role_permission left join sec_role using(role_id) left join sec_permission using(permission_id) WHERE role_name = ?"/>-->
    </bean>
    <!--自定义认证-->
    <bean id="myRealm" class="com.ogoodo.shiro.MyRealm">
    		<property name="credentialsMatcher">
    			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    				<property name="hashAlgorithmName" value="MD5"></property>
    				<property name="hashIterations" value="1024"></property>
    			</bean>
    		</property>
    </bean>

    <!-- Shiro安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--多realms配置-->
        <property name="realms">
            <list>
                <ref bean="myRealm"/>
                <!-- <ref bean="jdbcRealm"/> -->
            </list>
        </property>
        <!--<property name="realm" ref="jdbcRealm"/>-->
        <!--<property name="cacheManager" ref="cacheManager"/>-->
    </bean>

    <!--
       Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行
       Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
        <!-- <property name="successUrl" value="/" ></property> -->
        <!-- 用户访问未对其授权的资源时，所显示的连接 -->
        <property name="unauthorizedUrl" value="/"/>
        <!-- 配置哪些页面需要保护，以及访问这些页面需要的权限 -->
        <property name="filterChainDefinitions">
            <value>
                /test/* = anon
                /dologin = anon
                /logout = logout
                /user.jsp = roles[user]
                /admin.jsp = roles[admin]
                /tag = authc
                /** = anon
            </value>
        </property>
        <!-- <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap" /> -->
    </bean>
    <bean id="shiroLogin" class="com.ogoodo.shiro.ShiroLogin"/>
    <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="builderFilterChainDefinitionMap"/>
    <bean id="filterChainDefinitionMapBuilder" class="com.ogoodo.shiro.FilterChainDefinitionMapBuilder">
    </bean>
    <bean id="myShiroService" class="com.ogoodo.shiro.MyShiroService"></bean>
    <!--
       开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类，
       并在必要时进行安全逻辑验证
    -->
    <!--
    <bean
        class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean>
    <bean
        class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"></property>
    </bean>
    -->
</beans>
