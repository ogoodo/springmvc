<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:mvc="http://www.springframework.org/schema/mvc"    
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd   
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-3.2.xsd  
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
    >

	<!-- 指定Sping组件扫描的基本包路径 -->
	<context:component-scan base-package="com.ogoodo" />
	<!-- 启用MVC注解 -->
	<mvc:annotation-driven />
	<!-- <mvc:annotation-driven  validator="validator" />
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
      <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
      <property name="validationMessageSource" ref="messageSource"/>
    </bean> -->
<!-- 
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
 -->
 
	 <!-- 配置拦截器 -->
	<mvc:interceptors>
	   <mvc:interceptor>
	       <mvc:mapping path="/ajaxTest" />
	        <bean class="com.ogoodo.interceptor.TestInterceptor2" />
	    </mvc:interceptor>
	    <mvc:interceptor>
	        <mvc:mapping path="/*" />
	        <bean class="com.ogoodo.interceptor.TestInterceptor1" />
	    </mvc:interceptor>
	</mvc:interceptors>

    <!-- 启动 Spring json转换 -->  
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <bean class="org.springframework.http.converter.StringHttpMessageConverter" />  
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
                    <property name="supportedMediaTypes">  
                        <list>  
                        		<!-- response header content type -->
                            <value>application/json;charset=UTF-8</value>  
                        </list>  
                    </property>  
                </bean>  
            </list>  
        </property>  
    </bean>

 	<!-- JSP视图解析器-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    <property name="prefix" value="/WEB-INF/pages/" />
	    <property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置上传文件数据解析器 -->
	<!-- 文件上传 begin -->
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->   
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
        <!-- 指定所上传文件的总大小不能超过200000KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->   
        <property name="maxUploadSize" value="200000000"/>   
    </bean>
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->   
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">   
        <property name="exceptionMappings">   
            <props>   
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error/error.jsp页面 -->   
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error/error</prop>   
            </props>   
        </property>   
    </bean> 
	<!-- 文件上传 end -->

    <!-- 对静态资源文件的访问-->  
    <mvc:resources mapping="/images/**" location="/WEB-INF/images/" cache-period="31556926"/>  
    <mvc:resources mapping="/js/**" location="/WEB-INF/js/" cache-period="31556926"/>  
    <mvc:resources mapping="/css/**" location="/WEB-INF/css/" cache-period="31556926"/>  

	<!-- 配置参数校验国际化 -->
	<!-- <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="basenames">
	      <list>
	        <value>classpath:/WEB-INF/i18n/messages</value>
	        <value>classpath:/WEB-INF/i18n/format</value>
	        <value>classpath:/WEB-INF/i18n/exceptions</value>
	        <value>classpath:/WEB-INF/i18n/windows</value>
	      </list>
	    </property>
    </bean>
    <bean id="validateMessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <property name="defaultEncoding" value="UTF-8" />  
        <property name="useCodeAsDefaultMessage" value="true" />  
        <property name="cacheSeconds" value="10"></property>  
        <property name="basenames">  
            <list>
	        		<value>classpath:/WEB-INF/i18n/messages</value>
            </list>  
        </property>  
	</bean> -->

    <!--国际化：在MVC配置文件中，配置国际化属性文件：-->
    <!-- 参考: http://www.xdemo.org/spring-i18n/
    		http://blog.lifw.org/post/26098052
     -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="120"/>
        <property name="basenames">  
            <list>  
                <value>i18n/messages</value>
            </list>  
        </property>
    </bean>

	<!-- 区别：ReloadableResourceBundleMessageSource可以不重起服务器的情况下，读取资源文件，所以可以随时更改资源文件 -->
    <!-- <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="fileEncodings" value="utf-8"/>
        <property name="cacheSeconds" value="120"/>
        <property name="useCodeAsDefaultMessage" value="false" />
        <property name="basenames">  
            <list>  
                <value>i18n/messages</value> 
            </list>  
        </property>
    </bean> -->
    <!-- 基于Cookie的本地化解析器 -->
     <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
       <property name="cookieMaxAge" value="604800"/>
       <property name="defaultLocale" value="zh_CN"/>
       <property name="cookieName" value="Language"></property>
     </bean>
    <!-- 基于Session的本地化解析器 -->
    <!--<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />-->
    <!-- 想要能够通过超链接等切换语言还需要定义 LocaleChangeInterceptor 拦截器，
    		该拦截器的作用时拦截所有请求，如果请求中含有 locale 参数，则尝试将 locale 参数解析成 Locale 对象，
    		并设置基于 session 或者 cookie 的参数以便所有页面语言都被切换
    		参考: http://blog.lifw.org/post/26098052 -->
    <mvc:interceptors>
	    <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
	</mvc:interceptors>


    <bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"/>



    <!-- 定义全局异常处理器, 只有一个全局异常处理器起作用 -->
	<bean id="exceptionResolver2" class="com.ogoodo.globalexception.OverallExceptionResolver"></bean>
	<!--  -->

</beans>