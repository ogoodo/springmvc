<?xml version="1.0" encoding="UTF-8"?>
<!--
	级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL
	日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出
	以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志
	scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
	scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟
	debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false
-->
<configuration scan="true" scanPeriod="60 seconds" debug="true">
    <!-- 应用名称 -->
    <property name="APP_NAME" value="logbacktestspringmvc" />
    <!--日志文件的保存路径, 首先查找系统属性-Dlog.dir,如果存在就使用其；否则，在当前目录下创建名为logs目录做日志存放的目录 -->
    <!-- <property name="LOG_HOME" value="${log.dir:-logs}/${APP_NAME}" /> -->
    <property name="LOG_HOME" value="${webapplogback.root}log/${APP_NAME}" />
    <!-- <property name="LOG_HOME" value="/Users/chen/Documents/logback" /> -->
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="30" />
    <!-- 日志文件多大分包 -->
    <property name="logFileSize" value="10KB" />
    <!-- 日志输出格式 -->
    <property name="ENCODER_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{80} - %msg%n" />
    <property name="FILE_OUTPUT" value="${LOG_HOME}/debug__%d{yyyy-MM-dd}_%i.log" />
    <property name="FILE_ERROR"  value="${LOG_HOME}/error__%d{yyyy-MM-dd}_%i.log" />
    <property name="FILE_SYNC"   value="${LOG_HOME}/sync___%d{yyyy-MM-dd}_%i.log" />
    <contextName>${APP_NAME}</contextName>

    <!-- 控制台日志：输出全部日志到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>${ENCODER_PATTERN}</Pattern>
        </encoder>
    </appender>

    <!-- 文件日志：输出全部日志到文件 -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${FILE_OUTPUT}</fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6,
            		则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${maxHistory}</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 当一个日志大小大于10KB，则换一个新的日志。日志名的%i从0开始，自动递增 -->
                <maxFileSize>${logFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 错误日志：用于将错误日志输出到独立文件 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${FILE_ERROR}</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${logFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
        <!-- 过滤器，只记录WARN级别的日志 -->
        <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <!-- DENY，那么记录事件立即被抛弃，不再经过剩余过滤器；
			 NEUTRAL，那么有序列表里的下一个过滤器会接着处理记录事件；
			 ACCEPT，那么记录事件被立即处理，不再经过剩余过滤器。 -->
		<!-- 可以写自定义类过滤日志 extends Filter<ILoggingEvent> -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
        		<!-- 设置过滤级别 -->
            <level>WARN</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 独立输出的同步日志 -->
    <appender name="SYNC_FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${FILE_SYNC}</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${logFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
    </appender>

	<!--日志异步到数据库 -->  
    <!-- <appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource"> 
           <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
              <driverClass>com.mysql.jdbc.Driver</driverClass>
              <url>jdbc:mysql://127.0.0.1:3306/databaseName</url>
              <user>root</user>
              <password>root</password>
            </dataSource>
        </connectionSource>
    </appender> -->

    <logger name="log.sync" level="DEBUG" addtivity="true">
        <appender-ref ref="SYNC_FILE" />
    </logger>
    
    <!-- 在logback中配置mybatis显示sql begin -->
    <!-- <logger name="com.ibatis" level="DEBUG" />  
	<logger name="com.ibatis.common.jdbc.SimpleDataSource" level="DEBUG" />  
	<logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG" />  
	<logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="DEBUG" />  
	<logger name="java.sql.Connection" level="DEBUG" />  
	<logger name="java.sql.Statement" level="DEBUG" />  
	<logger name="java.sql.PreparedStatement" level="DEBUG" /> -->
	
	
    <!-- <logger name="org.apache.ibatis" level="DEBUG">  
	    <appender-ref ref="STDOUT"/>  
	</logger>  
	<logger name="java.sql" level="DEBUG">  
	    <appender-ref ref="STDOUT"/>  
	</logger> -->
	<!-- <logger name="org.mybatis" level="TRACE"><appender-ref ref="STDOUT"/></logger>
	<logger name="java.sql" level="TRACE"><appender-ref ref="STDOUT"/></logger>
	<logger name="java.sql.Connection" level="DEBUG" />
	<logger name="java.sql.Statement" level="DEBUG" />
	<logger name="java.sql.PreparedStatement" level="DEBUG" />
	<logger name="dao" level="DEBUG"/> -->
	<!-- <logger name="com.ogoodo.test.mysql.mapper" level="DEBUG"/> -->
    <!-- 在logback中配置mybatis显示sql end -->


	
    <root>
        <level value="DEBUG" />
        <!-- <level value="TRACE" /> -->
        <appender-ref ref="STDOUT" />
        <appender-ref ref="DEBUG_FILE" />
        <appender-ref ref="ERROR_FILE" />
        <!-- <appender-ref ref="com.ibatis" />
        <appender-ref ref="java.sql" />
        <appender-ref ref="com.ogoodo.test.mysql.mapper" /> -->
    </root>
</configuration>